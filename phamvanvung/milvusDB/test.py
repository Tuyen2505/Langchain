# from pymilvus import connections, Collection, utility

# # K·∫øt n·ªëi t·ªõi Milvus
# connections.connect(alias="default", host="localhost", port="19530")
# print(utility.list_collections())

# # K·∫øt n·ªëi ƒë·∫øn collection
# collection = Collection("pdf_collection")

# # # N·∫øu ch∆∞a c√≥ index, t·∫°o index cho tr∆∞·ªùng vectorDB
# # index_params = {
# #     "metric_type": "L2",         # Ho·∫∑c "IP" n·∫øu d√πng cosine similarity
# #     "index_type": "IVF_FLAT",      # Ki·ªÉu index, ƒëi·ªÅu ch·ªânh theo nhu c·∫ßu
# #     "params": {"nlist": 128}
# # }
# # collection.create_index(field_name="vectorDB", index_params=index_params)
# # print("Index ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")

# # Load collection v√†o b·ªô nh·ªõ
# collection.load()
# print("Collection ƒë√£ ƒë∆∞·ª£c load v√†o b·ªô nh·ªõ!")

# # Th·ª±c hi·ªán truy v·∫•n bao g·ªìm tr∆∞·ªùng vectorDB
# data = collection.query(expr="id >= 0", output_fields=["id", "vectorDB"], limit=10)
# print(data)


# from sentence_transformers import SentenceTransformer


# model = SentenceTransformer('sentence-transformers/all-mpnet-base-v2')
# query_text = "This is an example sentence."
# tokens = model.tokenizer.tokenize(query_text)
# print("Tokenized:", tokens)

# import sys
# import os

# parent_dir = os.path.abspath("..")
# sys.path.append("D:/vscode/Langchain/phamvanvung")

# from src.rag.file_loader import Loader

# data_dir = "D:/vscode/Langchain/phamvanvung/data_source/generative_ai"
# data_type = "pdf"

# if __name__ == "__main__":  # üõ† B·ªçc code trong ph·∫ßn n√†y!
#     doc_loader = Loader(file_type=data_type).load_dir(data_dir, workers=2)
#     print(doc_loader[2])  # ƒêa lu·ªìng
    # chunks = [doc.page_content for doc in doc_loader]
    # print(chunks[0])

from pymilvus import MilvusClient, DataType
from sentence_transformers import SentenceTransformer

import sys
import os
# L·∫•y th∆∞ m·ª•c cha ch·ª©a c·∫£ VectorDB v√† rag_langchain
parent_dir = os.path.abspath("..")
sys.path.append("D:/vscode/Langchain/phamvanvung")  # Th√™m v√†o sys.path
from src.rag.file_loader import Loader


# 1. K·∫øt n·ªëi Milvus :cite[1]:cite[9]
client = MilvusClient(
    uri="http://localhost:19530",  # ƒê·ªãa ch·ªâ Milvus server
    token="root:Milvus"            # Th√¥ng tin x√°c th·ª±c
)

# 2. T·∫°o collection v·ªõi schema t√πy ch·ªânh :cite[4]:cite[8]
collection_name = "test"
dimension = 768  

schema = client.create_schema(
    auto_id=True,
    enable_dynamic_field=False
)

schema.add_field(
    field_name="id", 
    datatype=DataType.INT64, 
    is_primary=True
)
schema.add_field(
    field_name="vectorDB", 
    datatype=DataType.FLOAT_VECTOR, 
    dim=dimension
)
schema.add_field(
    field_name="my_varchar", 
    datatype=DataType.VARCHAR, 
    max_length=65535
)
client.create_collection(
    collection_name=collection_name,
    schema=schema
)

# T·∫°o index cho tr∆∞·ªùng vectorDB

index_params = MilvusClient.prepare_index_params()

index_params.add_index(
    field_name="vectorDB",
    metric_type="L2",
    index_type="IVF_FLAT",
    index_name="vector_index",
    params={ "nlist": 128 }
)

client.create_index(
    collection_name=collection_name,
    index_params=index_params,
    timeout=30,
    sync=False # Whether to wait for index creation to complete before returning. Defaults to True.
)



# 3. Kh·ªüi t·∫°o embedding model
model = SentenceTransformer('sentence-transformers/all-mpnet-base-v2')

# 4. X·ª≠ l√Ω file PDF v√† ch√®n v√†o Milvus
def insert_pdf_to_milvus(data_dir,data_type):
    doc_loader = Loader(file_type=data_type).load_dir(data_dir, workers=2)
    chunks = [doc.page_content for doc in doc_loader]
    embeddings = model.encode(chunks)

    
    # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ ch√®n, th√™m thu·ªôc t√≠nh chunk_overlap
    data = [
        {
            "vectorDB": emb.tolist(),
            "my_varchar": chunk,
        } 
        for emb, chunk in zip(embeddings, chunks)
    ]
    
    # Th·ª±c hi·ªán insert v√†o collection (gi·∫£ s·ª≠ client v√† collection_name ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o)
    insert_result = client.insert(
        collection_name=collection_name,
        data=data
    )
    
    print(f"ƒê√£ ch√®n {len(insert_result['ids'])} b·∫£n ghi th√†nh c√¥ng t·ª´ folder: {data_dir}!")
    return insert_result


# 5. Th·ª±c thi ch∆∞∆°ng tr√¨nh
if __name__ == "__main__":
    data_dir = "D:/vscode/Langchain/phamvanvung/data_source/generative_ai"
    data_type = "pdf"
    result = insert_pdf_to_milvus(data_dir, data_type)

